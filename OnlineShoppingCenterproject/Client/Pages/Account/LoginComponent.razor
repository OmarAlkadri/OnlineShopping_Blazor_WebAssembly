@page "/login"
@using OnlineShoppingCenterproject.Client.Services
@using OnlineShoppingCenterproject.Core.Dto.UsersDto


<article class="container">
	@if (ShowAuthError)
	{
		<div class="alert alert-danger" role="alert">
			<p>@Error</p>
		</div>
	}
	<EditForm Model="_userForAuthentication" OnValidSubmit="ExecuteLogin" class="card card-body bg-light mt-5">
		<DataAnnotationsValidator />
		<div class="form-group">
			<div class="col-md-12 text-right">
		<a class="navbar-brand" href="/">Liquor <span>Go To Store</span></a>

			</div>
		</div>
		<div class="form-group row">
			<label for="email" class="col-md-2 col-form-label">Email:</label>
			<div class="col-md-10">
				<InputText id="email" class="form-control" @bind-Value="_userForAuthentication.Email" />
				<ValidationMessage For="@(() => _userForAuthentication.Email)" />
			</div>
		</div>
		<div class="form-group row">
			<label for="password" class="col-md-2 col-form-label">Password:</label>
			<div class="col-md-10">
				<InputText type="password" id="password" class="form-control" @bind-Value="_userForAuthentication.Password" />
				<ValidationMessage For="@(() => _userForAuthentication.Password)" />
			</div>
		</div>
		<div class="row">
			<div class="mb-3" font-weight: 400;>
				<label>
					<input type="checkbox" value="remember-me"> htırlat
				</label>
			</div>
			<div class="col-md-12 text-right">
				<button type="submit" class="btn btn-success">Login</button>
			</div>
		</div>
	</EditForm>
</article>

@code {
	Login _userForAuthentication = new Login();


	[Inject]
	IAuthenticationService AuthenticationService { get; set; }
	bool ShowAuthError { get; set; }
	string Error { get; set; }
	async Task ExecuteLogin()
	{
		ShowAuthError = false;
		var result = await AuthenticationService.Login(_userForAuthentication);
		if (!result.IsAuthSuccessful)
		{
			Error = result.ErrorMessage;
			ShowAuthError = true;
		}
		else
		{
			NavigationManager.NavigateTo("/");
		}
	}
}
